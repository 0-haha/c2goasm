package main

import (
	"bufio"
	"fmt"
	"log"
	"os"
	"strings"
)

// readLines reads a whole file into memory
// and returns a slice of its lines.
func readLines(path string) ([]string, error) {
	file, err := os.Open(path)
	if err != nil {
		return nil, err
	}
	defer file.Close()

	var lines []string
	scanner := bufio.NewScanner(file)
	for scanner.Scan() {
		lines = append(lines, scanner.Text())
	}
	return lines, scanner.Err()
}

// writeLines writes the lines to the given file.
func writeLines(lines []string, path string) error {
	file, err := os.Create(path)
	if err != nil {
		return err
	}
	defer file.Close()

	w := bufio.NewWriter(file)
	fmt.Fprintln(w, "//+build !noasm !appengine")
	fmt.Fprintln(w, "// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT")
	fmt.Fprintln(w, "")
	for _, line := range lines {
		fmt.Fprintln(w, line)
	}
	return w.Flush()
}

func process(assembly []string, goCompanionFile string) ([]string, error) {

	// TODO
	// strip header
	// add golang header
	// consistent use of rbp & rsp
	// test for absence of CALLs

	// Get one segment per function
	segments := SegmentSource(assembly)
	tables := SegmentConsts(assembly)

	var result []string

	// Iterate over all subroutines
	for isegment, s := range segments {

		golangArgs := GetGolangArgs(goCompanionFile, s.Name)
		stackArgs := ArgumentsOnStack(assembly[s.Start:s.End])
		if golangArgs > 6 && golangArgs-6 != stackArgs.Number {
			panic(fmt.Sprintf("Expected %d arguments on stack but only found %d", golangArgs-6, stackArgs.Number))
		}

		// Check for constants table
		var table Table
		if table = GetCorrespondingTable(assembly[s.Start:s.End], tables); table.IsPresent() {

			// Output constants table
			result = append(result, strings.Split(table.Constants, "\n")...)
			result = append(result, "") // append empty line
		}

		// Write header for subroutine in go assembly
		result = append(result, WriteGoasmPrologue(s, golangArgs, table)...)

		// Write body of code
		assembly, err := WriteGoasmBody(assembly[s.Start:s.End], table, s.stack, stackArgs)
		if err != nil {
			panic(fmt.Sprintf("assemblify error: %v", err))
		}
		result = append(result, assembly...)

		// Return from subroutine
		result = append(result, WriteGoasmEpilogue(s.stack)...)

		if isegment < len(segments)-1 {
			// Empty lines before next subroutine
			result = append(result, "\n", "\n")
		}
	}

	return result, nil
}

func main() {

	if len(os.Args) < 3 {
		fmt.Printf("error: not enough input files specified\n\n")
		fmt.Println("usage: c2goasm /path/to/c-project/build/SomeGreatCode.cpp.s SomeGreatCode_amd64.s")
		return
	}
	if !strings.HasSuffix(os.Args[2], ".s") {
		fmt.Printf("error: second parameter should have '.s' extension\n")
		return
	}
	goCompanion := os.Args[2][:len(os.Args[2])-2] + ".go"
	if _, err := os.Stat(goCompanion); os.IsNotExist(err) {
		fmt.Printf("error: companion '.go' file is missing for %s\n", os.Args[2])
		return
	}

	fmt.Println("Processing", os.Args[1])
	lines, err := readLines(os.Args[1])
	if err != nil {
		log.Fatalf("readLines: %s", err)
	}

	result, err := process(lines, goCompanion)
	if err != nil {
		fmt.Print(err)
		os.Exit(-1)
	}

	err = writeLines(result, os.Args[2])
	if err != nil {
		log.Fatalf("writeLines: %s", err)
	}
}
